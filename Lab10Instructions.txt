Note on txt: *sample_word* means it's a link. Copy and pasted from BlackBoard so obviously you can't click on them.
             **sample_word means the word is italized.

Stegonography - sample image processing code

These four images each have an image hidden inside. *encrypted*, *encrypted1*, *encrypted2*, *encrypted3*

This is a low contrast single band image (mode "L") for use in part 2. *lowContrastBW.png*

Part 1 80 pts
Write a program that will show the encrypted image, pull the hidden image out, show it, and save it to a file 
for all four images. You may not use the  ImageMath class to solve this problem.

Here is code that could otherwise be used to decode the images: 

#http://pillow.readthedocs.io

from PIL import Image, ImageDraw, ImageMath, ImageFont

def de_steg(encrypted_file):
    steg = Image.open(encrypted_file)
    rs, gs, bs = steg.split()

    rt = ImageMath.eval("convert((a&0x0F)<<4, 'L')", a=rs)  
    gt = ImageMath.eval("convert((a&0x0F)<<4, 'L')", a=gs)
    bt = ImageMath.eval("convert((a&0x0F)<<4, 'L')", a=bs)

    out = Image.merge("RGB", (rt, gt, bt))
    out.save("hiddenImage.png")
    steg.show()
    out.show()
    

if __name__ == '__main__':
    de_steg("encrypted4bits.png")

Part II  20 pts
Write a function that takes an image, im, as a parameter. Make the default for this parameter the*lowContrastBW.png* 
image. Show the image **im. Create a list, **h, *size 256 populated with 0s*. Iterate over the image, use each pixel, 
**p, as the index in your list and increment this value. The list, **h, will hold the count of every pixel intensity 
(0-255). Print **h. Pass this list to another function that returns a new list, **lut. This second function takes two 
parameters, list **h, and the product of the image’s width and height, **n. Create an empty list, **lut and an 
accumulator variable, **sum_h. Iterate over **h, accumulating its sum in **sum_h. Append the value 255/**n * **sum_h 
to **lut. Print **lut.
In the first function, create a copy, **im2, of the original image, **im. Iterate over **im, for each pixel, **p, 
at location (x, y), set the pixel in **im2 at (x, y) to the value of **lut at index **p. Show **im2.
The output for h and lut should be:
[625, 1908, 7502, 24159, 26221, 12648, 10504, 11956, 11193, 11609, 11257, 11619, 13213, 13419, 12021, 10362, 9899, 
8572, 7130, 5975, 5346, 4360, 3060, 2711, 2336, 2044, 1809, 1530, 1523, 1417, 1257, 1120, 1039, 929, 831, 762, 736, 
615, 583, 564, 525, 456, 442, 428, 402, 361, 348, 361, 312, 350, 312, 302, 294, 261, 275, 260, 281, 257, 284, 290, 
282, 283, 271, 263, 284, 268, 279, 287, 281, 288, 289, 251, 261, 287, 297, 281, 313, 303, 315, 277, 317, 315, 298, 
335, 302, 287, 281, 322, 281, 306, 307, 309, 292, 339, 266, 236, 269, 259, 270, 238, 255, 241, 217, 208, 195, 217, 
209, 205, 194, 229, 220, 192, 200, 184, 180, 180, 177, 202, 206, 183, 199, 207, 196, 186, 178, 193, 166, 221, 203, 
196, 213, 175, 218, 211, 185, 214, 182, 202, 195, 190, 192, 182, 201, 199, 215, 207, 210, 238, 239, 218, 224, 213, 
211, 203, 226, 218, 233, 201, 235, 214, 243, 206, 210, 225, 197, 215, 235, 232, 262, 238, 251, 249, 252, 227, 242, 
267, 212, 235, 220, 288, 273, 249, 237, 250, 219, 237, 239, 249, 248, 279, 256, 292, 237, 244, 236, 234, 214, 215, 
211, 221, 216, 230, 224, 213, 216, 240, 235, 231, 237, 242, 237, 246, 241, 278, 266, 255, 234, 250, 257, 273, 291, 
280, 314, 342, 347, 420, 424, 415, 411, 429, 438, 494, 509, 469, 459, 472, 471, 455, 438, 455, 379, 372, 347, 377, 
345, 338, 274, 239, 199, 178, 141, 124, 121, 109, 99, 301]

[0, 2, 8, 27, 49, 59, 67, 77, 86, 96, 105, 114, 125, 136, 146, 154, 162, 169, 175, 180, 184, 188, 190, 192, 194, 196, 
197, 199, 200, 201, 202, 203, 204, 205, 205, 206, 207, 207, 208, 208, 208, 209, 209, 209, 210, 210, 210, 211, 211, 
211, 211, 212, 212, 212, 212, 213, 213, 213, 213, 213, 214, 214, 214, 214, 215, 215, 215, 215, 216, 216, 216, 216, 
216, 217, 217, 217, 217, 218, 218, 218, 218, 219, 219, 219, 219, 220, 220, 220, 220, 221, 221, 221, 221, 222, 222, 
222, 222, 222, 223, 223, 223, 223, 223, 224, 224, 224, 224, 224, 224, 225, 225, 225, 225, 225, 225, 226, 226, 226, 
226, 226, 226, 226, 227, 227, 227, 227, 227, 227, 228, 228, 228, 228, 228, 228, 229, 229, 229, 229, 229, 229, 230, 
230, 230, 230, 230, 230, 230, 231, 231, 231, 231, 231, 232, 232, 232, 232, 232, 232, 233, 233, 233, 233, 233, 234, 
234, 234, 234, 234, 234, 235, 235, 235, 235, 235, 236, 236, 236, 236, 236, 237, 237, 237, 237, 237, 238, 238, 238, 
238, 238, 239, 239, 239, 239, 240, 240, 240, 240, 240, 240, 241, 241, 241, 241, 241, 241, 242, 242, 242, 242, 242, 
243, 243, 243, 243, 243, 244, 244, 244, 244, 245, 245, 245, 245, 246, 246, 246, 246, 247, 247, 248, 248, 248, 249, 
249, 249, 250, 250, 251, 251, 251, 252, 252, 252, 252, 253, 253, 253, 253, 254, 254, 254, 254, 254, 254, 254, 255]

Explain in your own words what the numbers in each list represent and how they are used in the context of this program.

Running your program should display the four encrypted images and their hidden images, the lowContrastBW image, 
the histogramEqualized image, h and lut.

Submit only your .py file in Blackboard. Your explanation of h and lut should be submitted as a comment in Blackboard. 
(-5 pts if not submitted as indicated)


*************************

On a Mac from terminal run the command 
pip3 install pillow

On a PC from the command line run the command 
pip install pillow

On a PC during installation of Python one must check the box to add Python to the path in environmental variables, 
otherwise it will not run from the command line. You can reinstall/upgrade and check the box.

Alternatively, on a PC run the following program:

import pip  # This install is for Windows only, running Python 3.4 or later

def install(package):
    pip.main(['install', package])


if __name__ == '__main__':
    install('pillow')